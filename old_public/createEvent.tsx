// Assuming you have a file structure where the Database class and ClubEvent model are properly set up
import React, { useState } from "react";
import { Database } from "./path/to/your/Database"; // Adjust import paths as necessary
import { ClubEvent } from "./path/to/your/models/ClubEvent";
import { Timestamp } from "firebase/firestore";
import "./css/styles.css";
import "./css/forms.css";

const CreateEvent: React.FC = () => {
  const [formData, setFormData] = useState({
    eventTitle: "",
    eventDate: "",
    eventTime: "",
    eventLocation: "",
    eventDescription: "",
  });

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prevState) => ({ ...prevState, [name]: value }));
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    // Assuming your constructor for ClubEvent does not need ID for new entries as Firestore generates it
    const eventDateTime = Timestamp.fromDate(
      new Date(`${formData.eventDate}T${formData.eventTime}`)
    );
    const newEvent = new ClubEvent(
      "", // ID will be generated by Firestore
      formData.eventTitle,
      formData.eventDescription,
      formData.eventLocation,
      "", // Assume imgUrl and handshakeUrl might be added later
      "", // Assuming category or other fields might be included similarly
      eventDateTime
    );

    const db = new Database(); // Initialize your database class
    try {
      const docRef = await db.addEvent(newEvent);
      console.log(`Event added with ID: ${docRef.id}`);
      // Optionally reset form or redirect user
    } catch (error) {
      console.error("Error adding event:", error);
      // Handle error (e.g., show an error message to the user)
    }
  };

  return (
    <div>
      <meta charSet="UTF-8" />
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />
      <title>AIS Events - Create Event</title>
      <link rel="icon" href="assets/logo.png" type="image/x-icon" />
      <link rel="preconnect" href="https://fonts.googleapis.com" />
      <link
        rel="preconnect"
        href="https://fonts.gstatic.com"
        crossOrigin="anonymous"
      />
      <link
        href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wdth,wght@0,75..100,300..800;1,75..100,300..800&display=swap"
        rel="stylesheet"
      />
      <form onSubmit={handleSubmit}>
        <h2>Create Event</h2>
        <div id="titleUnderline"></div>

        <label htmlFor="eventTitle">Event Title</label>
        <input
          type="text"
          id="eventTitle"
          name="eventTitle"
          value={formData.eventTitle}
          onChange={handleChange}
          required
        />

        <p>Event Category</p>
        <div className="radioSelector">
          <input
            type="radio"
            id="discoverCategory"
            name="eventCategory"
            value="Discover"
            required
          ></input>
          <label htmlFor="discoverCategory">Discover</label>
          <input
            type="radio"
            id="connectCategory"
            name="eventCategory"
            value="Connect"
            required
          ></input>
          <label htmlFor="connectCategory">Connect</label>
          <input
            type="radio"
            id="socializeCategory"
            name="eventCategory"
            value="Socialize"
            required
          ></input>
          <label htmlFor="socializeCategory">Socialize</label>
          <input
            type="radio"
            id="learnCategory"
            name="eventCategory"
            value="Learn"
            required
          ></input>
          <label htmlFor="learnCategory">Learn</label>
          <input
            type="radio"
            id="serveCategory"
            name="eventCategory"
            value="Serve"
            required
          ></input>
          <label htmlFor="serveCategory">Serve</label>
        </div>

        <label htmlFor="eventDate">Event Date</label>
        <input
          type="date"
          id="eventDate"
          name="eventDate"
          value={formData.eventDate}
          onChange={handleChange}
          required
        />

        <label htmlFor="eventTime">Event Time</label>
        <input
          type="time"
          id="eventTime"
          name="eventTime"
          value={formData.eventTime}
          onChange={handleChange}
          required
        />

        <label htmlFor="eventLocation">Event Location</label>
        <input
          type="text"
          id="eventLocation"
          name="eventLocation"
          value={formData.eventLocation}
          onChange={handleChange}
          placeholder="Room number, building, etc."
          required
        />

        <label htmlFor="eventDescription">Event Description</label>
        <textarea
          id="eventDescription"
          name="eventDescription"
          value={formData.eventDescription}
          onChange={handleChange}
          placeholder="Who the event is for, length of event, etc."
          required
        ></textarea>

        <button type="submit">Create Event</button>
      </form>
    </div>
  );
};

export default CreateEvent;
